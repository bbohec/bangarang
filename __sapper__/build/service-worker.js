(function () {
	'use strict';

	// This file is generated by Sapper â€” do not edit it!
	const timestamp = 1618848309617;

	const files = [
		"/service-worker-index.html",
		"/favicon.png",
		"/global.css",
		"/logo-192.png",
		"/logo-512.png",
		"/manifest.json"
	];

	const shell = [
		"/client/client.b653b9c4.js",
		"/client/index.04bb8946.js",
		"/client/MainMenu.c3bc5bb7.js",
		"/client/messages.76a6385c.js",
		"/client/linkPrefixes.50c0e772.js",
		"/client/WelcomeTitle.e6620aad.js",
		"/client/GenericButton.f6bea749.js",
		"/client/Link.d017d26d.js",
		"/client/GenericTaskNotification.f13dd461.js",
		"/client/LanguageSelect.7533416e.js",
		"/client/MainTitle.af69e989.js",
		"/client/SigningInMenu.00e63b41.js",
		"/client/currentClaimIdStore.5ff136c2.js",
		"/client/GenericPasswordField.f02dfa5b.js",
		"/client/GenericSubmitField.cd26a317.js",
		"/client/DeclareClaim.d002284e.js",
		"/client/DeclaringInformation.f2d42da9.js",
		"/client/Register.f64a516e.js",
		"/client/[claimId].d7390d75.js",
		"/client/index.9fbc62d0.js",
		"/client/[valuePropositionPageLink].d9ab3d9f.js",
		"/client/retreiveValuePropositionFromValuePropositionPageLink.ca2da91b.js",
		"/client/HeaderTitle.f89bcfd0.js",
		"/client/BusinessModel.e4b85815.js",
		"/client/DescriptionCard.1b3c3879.js",
		"/client/[landingPageId].f8191af1.js",
		"/client/LeanCanvas.80408efe.js"
	];

	const ASSETS = `cache${timestamp}`;
	// `shell` is an array of all the files generated by the bundler,
	// `files` is an array of everything in the `static` directory
	const to_cache = shell.concat(files);
	const staticAssets = new Set(to_cache);
	// @ts-ignore
	self.addEventListener('install', (event) => {
	    event.waitUntil(caches
	        .open(ASSETS)
	        .then(cache => cache.addAll(to_cache))
	        .then(() => {
	        self.skipWaiting();
	    }));
	});
	// @ts-ignore
	self.addEventListener('activate', (event) => {
	    event.waitUntil(caches.keys().then(async (keys) => {
	        // delete old caches
	        for (const key of keys) {
	            if (key !== ASSETS)
	                await caches.delete(key);
	        }
	        self.clients.claim();
	    }));
	});
	/**
	 * Fetch the asset from the network and store it in the cache.
	 * Fall back to the cache if the user is offline.
	 */
	async function fetchAndCache(request) {
	    const cache = await caches.open(`offline${timestamp}`);
	    try {
	        const response = await fetch(request);
	        cache.put(request, response.clone());
	        return response;
	    }
	    catch (err) {
	        const response = await cache.match(request);
	        if (response)
	            return response;
	        throw err;
	    }
	}
	// @ts-ignore
	self.addEventListener('fetch', (event) => {
	    if (event.request.method !== 'GET' || event.request.headers.has('range'))
	        return;
	    const url = new URL(event.request.url);
	    // don't try to handle e.g. data: URIs
	    const isHttp = url.protocol.startsWith('http');
	    const isDevServerRequest = url.hostname === self.location.hostname && url.port !== self.location.port;
	    const isStaticAsset = url.host === self.location.host && staticAssets.has(url.pathname);
	    const skipBecauseUncached = event.request.cache === 'only-if-cached' && !isStaticAsset;
	    if (isHttp && !isDevServerRequest && !skipBecauseUncached) {
	        event.respondWith((async () => {
	            // always serve static files and bundler-generated assets from cache.
	            // if your application has other URLs with data that will never change,
	            // set this variable to true for them and they will only be fetched once.
	            const cachedAsset = isStaticAsset && await caches.match(event.request);
	            // for pages, you might want to serve a shell `service-worker-index.html` file,
	            // which Sapper has generated for you. It's not right for every
	            // app, but if it's right for yours then uncomment this section
	            /*
	            if (!cachedAsset && url.origin === self.origin && routes.find(route => route.pattern.test(url.pathname))) {
	                return caches.match('/service-worker-index.html');
	            }
	            */
	            return cachedAsset || fetchAndCache(event.request);
	        })());
	    }
	});

}());
