(function () {
	'use strict';

	// This file is generated by Sapper â€” do not edit it!
	const timestamp = 1612457719590;

	const files = [
		"/service-worker-index.html",
		"/manifest.json"
	];

	const shell = [
		"/client/client.2fdb028b.js",
		"/client/inject_styles.5607aec6.js",
		"/client/index.e6f0c924.js",
		"/client/Link.cbb58840.js",
		"/client/EarlyAdoptersAgileTeamMember.d97dcbfe.js",
		"/client/ViewTitle.5d3fba97.js",
		"/client/EarlyAdoptersSyndicalist.6d1b45ed.js",
		"/client/EarlyAdoptersActivist.d237ed01.js",
		"/client/BusinessModel.4062b741.js",
		"/client/DescriptionCard.7b6840ad.js",
		"/client/LeanCanvas.0c2b0558.js",
		"/client/sapper-dev-client.1e7a4a5e.js"
	];

	const ASSETS = `cache${timestamp}`;
	// `shell` is an array of all the files generated by the bundler,
	// `files` is an array of everything in the `static` directory
	const to_cache = shell.concat(files);
	const staticAssets = new Set(to_cache);
	self.addEventListener('install', (event) => {
	    event.waitUntil(caches
	        .open(ASSETS)
	        .then(cache => cache.addAll(to_cache))
	        .then(() => {
	        self.skipWaiting();
	    }));
	});
	self.addEventListener('activate', (event) => {
	    event.waitUntil(caches.keys().then(async (keys) => {
	        // delete old caches
	        for (const key of keys) {
	            if (key !== ASSETS)
	                await caches.delete(key);
	        }
	        self.clients.claim();
	    }));
	});
	/**
	 * Fetch the asset from the network and store it in the cache.
	 * Fall back to the cache if the user is offline.
	 */
	async function fetchAndCache(request) {
	    const cache = await caches.open(`offline${timestamp}`);
	    try {
	        const response = await fetch(request);
	        cache.put(request, response.clone());
	        return response;
	    }
	    catch (err) {
	        const response = await cache.match(request);
	        if (response)
	            return response;
	        throw err;
	    }
	}
	self.addEventListener('fetch', (event) => {
	    if (event.request.method !== 'GET' || event.request.headers.has('range'))
	        return;
	    const url = new URL(event.request.url);
	    // don't try to handle e.g. data: URIs
	    const isHttp = url.protocol.startsWith('http');
	    const isDevServerRequest = url.hostname === self.location.hostname && url.port !== self.location.port;
	    const isStaticAsset = url.host === self.location.host && staticAssets.has(url.pathname);
	    const skipBecauseUncached = event.request.cache === 'only-if-cached' && !isStaticAsset;
	    if (isHttp && !isDevServerRequest && !skipBecauseUncached) {
	        event.respondWith((async () => {
	            // always serve static files and bundler-generated assets from cache.
	            // if your application has other URLs with data that will never change,
	            // set this variable to true for them and they will only be fetched once.
	            const cachedAsset = isStaticAsset && await caches.match(event.request);
	            // for pages, you might want to serve a shell `service-worker-index.html` file,
	            // which Sapper has generated for you. It's not right for every
	            // app, but if it's right for yours then uncomment this section
	            /*
	            if (!cachedAsset && url.origin === self.origin && routes.find(route => route.pattern.test(url.pathname))) {
	                return caches.match('/service-worker-index.html');
	            }
	            */
	            return cachedAsset || fetchAndCache(event.request);
	        })());
	    }
	});

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmljZS13b3JrZXIuanMiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ub2RlX21vZHVsZXMvQHNhcHBlci9zZXJ2aWNlLXdvcmtlci5qcyIsIi4uLy4uL3NyYy9zZXJ2aWNlLXdvcmtlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGlzIGZpbGUgaXMgZ2VuZXJhdGVkIGJ5IFNhcHBlciDigJQgZG8gbm90IGVkaXQgaXQhXG5leHBvcnQgY29uc3QgdGltZXN0YW1wID0gMTYxMjQ1NzcxOTU5MDtcblxuZXhwb3J0IGNvbnN0IGZpbGVzID0gW1xuXHRcIi9zZXJ2aWNlLXdvcmtlci1pbmRleC5odG1sXCIsXG5cdFwiL21hbmlmZXN0Lmpzb25cIlxuXTtcbmV4cG9ydCB7IGZpbGVzIGFzIGFzc2V0cyB9OyAvLyBsZWdhY3lcblxuZXhwb3J0IGNvbnN0IHNoZWxsID0gW1xuXHRcIi9jbGllbnQvY2xpZW50LjJmZGIwMjhiLmpzXCIsXG5cdFwiL2NsaWVudC9pbmplY3Rfc3R5bGVzLjU2MDdhZWM2LmpzXCIsXG5cdFwiL2NsaWVudC9pbmRleC5lNmYwYzkyNC5qc1wiLFxuXHRcIi9jbGllbnQvTGluay5jYmI1ODg0MC5qc1wiLFxuXHRcIi9jbGllbnQvRWFybHlBZG9wdGVyc0FnaWxlVGVhbU1lbWJlci5kOTdkY2JmZS5qc1wiLFxuXHRcIi9jbGllbnQvVmlld1RpdGxlLjVkM2ZiYTk3LmpzXCIsXG5cdFwiL2NsaWVudC9FYXJseUFkb3B0ZXJzU3luZGljYWxpc3QuNmQxYjQ1ZWQuanNcIixcblx0XCIvY2xpZW50L0Vhcmx5QWRvcHRlcnNBY3RpdmlzdC5kMjM3ZWQwMS5qc1wiLFxuXHRcIi9jbGllbnQvQnVzaW5lc3NNb2RlbC40MDYyYjc0MS5qc1wiLFxuXHRcIi9jbGllbnQvRGVzY3JpcHRpb25DYXJkLjdiNjg0MGFkLmpzXCIsXG5cdFwiL2NsaWVudC9MZWFuQ2FudmFzLjBjMmIwNTU4LmpzXCIsXG5cdFwiL2NsaWVudC9zYXBwZXItZGV2LWNsaWVudC4xZTdhNGE1ZS5qc1wiXG5dO1xuXG5leHBvcnQgY29uc3Qgcm91dGVzID0gW1xuXHR7IHBhdHRlcm46IC9eXFwvJC8gfSxcblx0eyBwYXR0ZXJuOiAvXlxcL0Vhcmx5QWRvcHRlcnNBZ2lsZVRlYW1NZW1iZXJcXC8/JC8gfSxcblx0eyBwYXR0ZXJuOiAvXlxcL0Vhcmx5QWRvcHRlcnNTeW5kaWNhbGlzdFxcLz8kLyB9LFxuXHR7IHBhdHRlcm46IC9eXFwvRWFybHlBZG9wdGVyc0FjdGl2aXN0XFwvPyQvIH0sXG5cdHsgcGF0dGVybjogL15cXC9CdXNpbmVzc01vZGVsXFwvPyQvIH0sXG5cdHsgcGF0dGVybjogL15cXC9MZWFuQ2FudmFzXFwvPyQvIH1cbl07IixudWxsXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0NBQUE7Q0FDTyxNQUFNLFNBQVMsR0FBRyxhQUFhLENBQUM7QUFDdkM7Q0FDTyxNQUFNLEtBQUssR0FBRztDQUNyQixDQUFDLDRCQUE0QjtDQUM3QixDQUFDLGdCQUFnQjtDQUNqQixDQUFDLENBQUM7QUFFRjtDQUNPLE1BQU0sS0FBSyxHQUFHO0NBQ3JCLENBQUMsNEJBQTRCO0NBQzdCLENBQUMsbUNBQW1DO0NBQ3BDLENBQUMsMkJBQTJCO0NBQzVCLENBQUMsMEJBQTBCO0NBQzNCLENBQUMsa0RBQWtEO0NBQ25ELENBQUMsK0JBQStCO0NBQ2hDLENBQUMsOENBQThDO0NBQy9DLENBQUMsMkNBQTJDO0NBQzVDLENBQUMsbUNBQW1DO0NBQ3BDLENBQUMscUNBQXFDO0NBQ3RDLENBQUMsZ0NBQWdDO0NBQ2pDLENBQUMsdUNBQXVDO0NBQ3hDLENBQUM7O0NDcEJELE1BQU0sTUFBTSxHQUFHLFFBQVEsU0FBUyxFQUFFLENBQUM7Q0FFbkM7Q0FDQTtDQUNBLE1BQU0sUUFBUSxHQUFJLEtBQWtCLENBQUMsTUFBTSxDQUFDLEtBQWlCLENBQUMsQ0FBQztDQUMvRCxNQUFNLFlBQVksR0FBRyxJQUFJLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztDQUV2QyxJQUFJLENBQUMsZ0JBQWdCLENBQUMs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
