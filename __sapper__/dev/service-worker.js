(function () {
	'use strict';

	// This file is generated by Sapper â€” do not edit it!
	const timestamp = 1612985298987;

	const files = [
		"/service-worker-index.html",
		"/favicon.png",
		"/global.css",
		"/logo-192.png",
		"/logo-512.png",
		"/manifest.json"
	];

	const shell = [
		"/client/client.582e563b.js",
		"/client/index.12db0852.js",
		"/client/MainMenu.94475a8c.js",
		"/client/links.763a27da.js",
		"/client/Link.5238d98b.js",
		"/client/claims.cfaeb668.js",
		"/client/[valuePropositionPageLink].403d8da6.js",
		"/client/HeaderTitle.a039f737.js",
		"/client/retreiveValuePropositionFromValuePropositionPageLink.5c520115.js",
		"/client/valuePropositions.ff50b72e.js",
		"/client/BusinessModel.4a13b042.js",
		"/client/DescriptionCard.96f0f914.js",
		"/client/[landingPageId].ad5b8e97.js",
		"/client/MainTitle.9af6f558.js",
		"/client/GenericButton.dd8d188c.js",
		"/client/LeanCanvas.3f4d5857.js",
		"/client/[claimId].c9a616bc.js",
		"/client/sapper-dev-client.1e7a4a5e.js"
	];

	const ASSETS = `cache${timestamp}`;
	// `shell` is an array of all the files generated by the bundler,
	// `files` is an array of everything in the `static` directory
	const to_cache = shell.concat(files);
	const staticAssets = new Set(to_cache);
	self.addEventListener('install', (event) => {
	    event.waitUntil(caches
	        .open(ASSETS)
	        .then(cache => cache.addAll(to_cache))
	        .then(() => {
	        self.skipWaiting();
	    }));
	});
	self.addEventListener('activate', (event) => {
	    event.waitUntil(caches.keys().then(async (keys) => {
	        // delete old caches
	        for (const key of keys) {
	            if (key !== ASSETS)
	                await caches.delete(key);
	        }
	        self.clients.claim();
	    }));
	});
	/**
	 * Fetch the asset from the network and store it in the cache.
	 * Fall back to the cache if the user is offline.
	 */
	async function fetchAndCache(request) {
	    const cache = await caches.open(`offline${timestamp}`);
	    try {
	        const response = await fetch(request);
	        cache.put(request, response.clone());
	        return response;
	    }
	    catch (err) {
	        const response = await cache.match(request);
	        if (response)
	            return response;
	        throw err;
	    }
	}
	self.addEventListener('fetch', (event) => {
	    if (event.request.method !== 'GET' || event.request.headers.has('range'))
	        return;
	    const url = new URL(event.request.url);
	    // don't try to handle e.g. data: URIs
	    const isHttp = url.protocol.startsWith('http');
	    const isDevServerRequest = url.hostname === self.location.hostname && url.port !== self.location.port;
	    const isStaticAsset = url.host === self.location.host && staticAssets.has(url.pathname);
	    const skipBecauseUncached = event.request.cache === 'only-if-cached' && !isStaticAsset;
	    if (isHttp && !isDevServerRequest && !skipBecauseUncached) {
	        event.respondWith((async () => {
	            // always serve static files and bundler-generated assets from cache.
	            // if your application has other URLs with data that will never change,
	            // set this variable to true for them and they will only be fetched once.
	            const cachedAsset = isStaticAsset && await caches.match(event.request);
	            // for pages, you might want to serve a shell `service-worker-index.html` file,
	            // which Sapper has generated for you. It's not right for every
	            // app, but if it's right for yours then uncomment this section
	            /*
	            if (!cachedAsset && url.origin === self.origin && routes.find(route => route.pattern.test(url.pathname))) {
	                return caches.match('/service-worker-index.html');
	            }
	            */
	            return cachedAsset || fetchAndCache(event.request);
	        })());
	    }
	});

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmljZS13b3JrZXIuanMiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ub2RlX21vZHVsZXMvQHNhcHBlci9zZXJ2aWNlLXdvcmtlci5qcyIsIi4uLy4uL3NyYy9zZXJ2aWNlLXdvcmtlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGlzIGZpbGUgaXMgZ2VuZXJhdGVkIGJ5IFNhcHBlciDigJQgZG8gbm90IGVkaXQgaXQhXG5leHBvcnQgY29uc3QgdGltZXN0YW1wID0gMTYxMjk4NTI5ODk4NztcblxuZXhwb3J0IGNvbnN0IGZpbGVzID0gW1xuXHRcIi9zZXJ2aWNlLXdvcmtlci1pbmRleC5odG1sXCIsXG5cdFwiL2Zhdmljb24ucG5nXCIsXG5cdFwiL2dsb2JhbC5jc3NcIixcblx0XCIvbG9nby0xOTIucG5nXCIsXG5cdFwiL2xvZ28tNTEyLnBuZ1wiLFxuXHRcIi9tYW5pZmVzdC5qc29uXCJcbl07XG5leHBvcnQgeyBmaWxlcyBhcyBhc3NldHMgfTsgLy8gbGVnYWN5XG5cbmV4cG9ydCBjb25zdCBzaGVsbCA9IFtcblx0XCIvY2xpZW50L2NsaWVudC41ODJlNTYzYi5qc1wiLFxuXHRcIi9jbGllbnQvaW5kZXguMTJkYjA4NTIuanNcIixcblx0XCIvY2xpZW50L01haW5NZW51Ljk0NDc1YThjLmpzXCIsXG5cdFwiL2NsaWVudC9saW5rcy43NjNhMjdkYS5qc1wiLFxuXHRcIi9jbGllbnQvTGluay41MjM4ZDk4Yi5qc1wiLFxuXHRcIi9jbGllbnQvY2xhaW1zLmNmYWViNjY4LmpzXCIsXG5cdFwiL2NsaWVudC9bdmFsdWVQcm9wb3NpdGlvblBhZ2VMaW5rXS40MDNkOGRhNi5qc1wiLFxuXHRcIi9jbGllbnQvSGVhZGVyVGl0bGUuYTAzOWY3MzcuanNcIixcblx0XCIvY2xpZW50L3JldHJlaXZlVmFsdWVQcm9wb3NpdGlvbkZyb21WYWx1ZVByb3Bvc2l0aW9uUGFnZUxpbmsuNWM1MjAxMTUuanNcIixcblx0XCIvY2xpZW50L3ZhbHVlUHJvcG9zaXRpb25zLmZmNTBiNzJlLmpzXCIsXG5cdFwiL2NsaWVudC9CdXNpbmVzc01vZGVsLjRhMTNiMDQyLmpzXCIsXG5cdFwiL2NsaWVudC9EZXNjcmlwdGlvbkNhcmQuOTZmMGY5MTQuanNcIixcblx0XCIvY2xpZW50L1tsYW5kaW5nUGFnZUlkXS5hZDViOGU5Ny5qc1wiLFxuXHRcIi9jbGllbnQvTWFpblRpdGxlLjlhZjZmNTU4LmpzXCIsXG5cdFwiL2NsaWVudC9HZW5lcmljQnV0dG9uLmRkOGQxODhjLmpzXCIsXG5cdFwiL2NsaWVudC9MZWFuQ2FudmFzLjNmNGQ1ODU3LmpzXCIsXG5cdFwiL2NsaWVudC9bY2xhaW1JZF0uYzlhNjE2YmMuanNcIixcblx0XCIvY2xpZW50L3NhcHBlci1kZXYtY2xpZW50LjFlN2E0YTVlLmpzXCJcbl07XG5cbmV4cG9ydCBjb25zdCByb3V0ZXMgPSBbXG5cdHsgcGF0dGVybjogL15cXC8kLyB9LFxuXHR7IHBhdHRlcm46IC9eXFwvdmFsdWVQcm9wb3NpdGlvbnNcXC8oW14vXSs/KVxcLz8kLyB9LFxuXHR7IHBhdHRlcm46IC9eXFwvQnVzaW5lc3NNb2RlbFxcLz8kLyB9LFxuXHR7IHBhdHRlcm46IC9eXFwvbGFuZGluZ1BhZ2VzXFwvKFteL10rPylcXC8oW14vXSs/KVxcLz8kLyB9LFxuXHR7IHBhdHRlcm46IC9eXFwvTGVhbkNhbnZhc1xcLz8kLyB9LFxuXHR7IHBhdHRlcm46IC9eXFwvTWFpbk1lbnVcXC8/JC8gfSxcblx0eyBwYXR0ZXJuOiAvXlxcL2NsYWltc1xcLyhbXi9dKz8pXFwvPyQvIH1cbl07IixudWxsXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0NBQUE7Q0FDTyxNQUFNLFNBQVMsR0FBRyxhQUFhLENBQUM7QUFDdkM7Q0FDTyxNQUFNLEtBQUssR0FBRztDQUNyQixDQUFDLDRCQUE0QjtDQUM3QixDQUFDLGNBQWM7Q0FDZixDQUFDLGFBQWE7Q0FDZCxDQUFDLGVBQWU7Q0FDaEIsQ0FBQyxlQUFlO0NBQ2hCLENBQUMsZ0JBQWdCO0NBQ2pCLENBQUMsQ0FBQztB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
